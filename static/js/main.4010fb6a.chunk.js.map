{"version":3,"sources":["theme/Card.jsx","components/forms/ParentStateUpdater.jsx","context/AzurContext.js","views/AzurDefault/hooks/useAzur.js","utils/inputValidationSchemes.js","components/forms/FieldArrayInput.jsx","components/forms/PartyStrengthsFieldArray.jsx","components/forms/PresetButton.jsx","components/forms/PartyStrengthsInput.jsx","components/forms/MethodsInput.jsx","views/AzurDefault/Input/AzurForm.jsx","views/AzurDefault/Input/Input.jsx","utils/getPartyColor.js","components/PieChart.jsx","views/AzurDefault/Output/DistributionOutput.jsx","components/tables/CellRenders.jsx","components/tables/NumberRangeFilter.jsx","components/tables/Pagination.jsx","components/tables/RawTable.jsx","components/tables/DataTable.jsx","views/AzurDefault/Output/AssignmentSeq.jsx","views/AzurDefault/Output/TableOutput.jsx","views/AzurDefault/Output/ExportIcons.jsx","views/AzurDefault/Output/OutputTabs.jsx","views/AzurDefault/Output/InputErrorFeedback.jsx","views/AzurDefault/Output/Output.jsx","utils/usePrint.js","views/AzurDefault/Print/PrintTable.jsx","views/AzurDefault/Print/PrintWrapper.jsx","views/AzurDefault/AzurDefault.jsx","App.js","theme/fonts.js","theme/Table.js","theme/themes.js","index.js"],"names":["Card","variant","rest","styles","useStyleConfig","__css","ParentStateUpdater","inputData","setInputData","useFormikContext","values","validateForm","debouncedSetAzur","React","useCallback","_","debounce","a","errors","isEmpty","data","num_of_seats","otherInputs","inputCopy","numSeats","isEqual","useEffect","AzurContext","createContext","AzurContextWrapper","children","useState","azurInput","setAzurInput","setData","loading","setLoading","error","setError","abortController","AbortController","fetchAzur","azurInputUpdate","partyStrengthForApi","partyStrengths","forEach","entry","name","strength","fetch","method","headers","signal","body","JSON","stringify","votes","return_table","then","resp","ok","json","errorMessage","message","Error","azurResponse","catch","fetchingError","console","log","abort","useAzur","Provider","value","numSeatsSchema","Yup","typeError","integer","required","min","max","partyStrengthsSchema","of","shape","test","namesList","map","Set","size","length","methodSchema","FieldArrayInput","fieldArrayName","index","fieldKey","fieldType","cssprops","FieldInput","errorMsg","errorForFieldExists","get","type","as","Input","layerStyle","title","arrayErrors","Array","isArray","Object","prototype","hasOwnProperty","call","PartyStrengthsFieldArray","MAX_FRACTIONS","errorsPartyStrengths","remove","push","flexDirection","flexGrow","width","ml","textAlign","isDisabled","m","onClick","_hover","backgroundColor","px","disabled","pointerEvents","color","PresetButton","activeValue","presetData","attributeName","setFieldValue","PartyStrengthsInput","attributeKey","partyStrengthsKey","PartyStrengthsPresetButtons","columnGap","rowGap","templateColumns","bundestagMandatsverteilung","mandatePreset","label","key","MethodsInput","constants","azurMethods","apiName","AzurForm","fontSize","p","py","height","alignItems","spacing","AzurInputs","initialValues","useContext","schema","validationSchema","validateOnChange","validateOnBlur","getPartyColor","partyName","partyArrayLength","colorScale","d3","domain","range","partyColors","partyAltNamesMapping","PieChart","outerRadius","innerRadius","parsedData","entries","select","svg","append","attr","arcGenerator","pieGenerator","padAngle","d","selectAll","enter","style","arc","i","text","drawChart","id","display","DistributionOutput","isAmbiguous","seatSplit","sizes","useTheme","innerWidthPx","convertRemToPixels","outerWidthPx","partyNamesSorted","seatSplitSorted","my","keys","fractionName","fractionStrength","join","status","mr","rem","parseFloat","getComputedStyle","document","documentElement","PositionCell","cell","justifyContent","bg","fontWeight","SeatCountCell","SeatCountCellBase","parseSeatCountOutput","has","row","original","seat_goes_to","column","Header","NumberRangeColumnFilter","filterValue","preFilteredRows","setFilter","useMemo","align","onChange","e","val","target","old","parseInt","undefined","placeholder","PageSelect","pageOptions","gotoPage","pageIndex","state","flexShrink","w","mx","defaultValue","SelectPageLength","pageSize","setPageSize","Number","RawTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","getRowProps","maxWidth","headerGroup","getHeaderGroupProps","getHeaderProps","render","header","cells","getCellProps","DataTable","columns","defaultColumn","disableFilters","startHeaders","accessor","_row","Cell","defaultCanFilter","Filter","NumberRangeFilter","filter","dataMemo","colsMemo","concat","useTable","useFilters","usePagination","AssignmentSeq","assignmentSequence","tableData","partyNames","seats","totalPartyCount","findIndex","elem","partyColor","CircleIcon","props","viewBox","fill","flex","boxSize","AssignmentCell","TableOutput","isNumeric","tableRow","is_ambiguous","ExportIcons","window","dispatchEvent","Event","setTimeout","print","OutputTabs","tabIndex","setTabIndex","selectedStyle","boderColor","border","borderBottom","boxShadow","mt","_selected","minHeight","distribution","table","assignment_sequence","InputErrorFeedback","inputErrors","errorEntry","Output","PrintTable","tableOutput","slice","rowIndex","colIndex","PrintWrapper","azurInputData","methodUsed","methodTitle","find","AzurDefault","isPrinting","setIsPrinting","addEventListener","usePrint","margin","maxHeight","App","useDisclosure","isOpen","onOpen","onClose","className","href","colorScheme","FontFaces","Table","baseStyle","overflowX","borderCollapse","th","textTransform","td","md","lg","variants","stickyHeader","overflow","thead","position","top","defaultProps","bundestagTheme","extendTheme","components","Button","padding","whiteSpace","wordWrap","borderRadius","active","borderColor","parts","field","outline","outlineColor","fakeInput","Heading","mb","xl","Tabs","tabpanel","tab","overflowY","ghost","colors","brand","primary","orange","orangeAlpha","darkBlue","darkBlueAlpha","backgroundGrey","fonts","heading","fontSizes","xs","sm","layerStyles","errorGlow","ambiguityContainerHighlight","changedRowHighlight","ambigousRowHighlight","ReactDOM","StrictMode","resetCSS","theme","getElementById"],"mappings":"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","file":"static/js/main.4010fb6a.chunk.js","sourcesContent":["import { Box, useStyleConfig } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\n\nCard.propTypes = { variant: PropTypes.string };\n\nfunction Card({ variant, ...rest }) {\n  const styles = useStyleConfig(\"Card\", { variant });\n  return <Box __css={styles} {...rest} />;\n}\n\nexport default Card;\n","import React from \"react\";\nimport _ from \"lodash\";\nimport { useFormikContext } from \"formik\";\n\nconst ParentStateUpdater = ({ inputData, setInputData }) => {\n  const DEBOUNCE_DELAY = 550; // we wait for additional input for 300ms before  updating the input\n\n  const { values, validateForm } = useFormikContext();\n  const debouncedSetAzur = React.useCallback(\n    _.debounce(async (values, validateForm, inputData, setInputData) => {\n      // validate input changes for form\n      const errors = await validateForm();\n\n      if (_.isEmpty(errors)) {\n        // Update to values and no error exists\n        // rename numSeats for equality check\n        const { num_of_seats, ...otherInputs } = inputData?.data;\n        const inputCopy = { ...otherInputs, numSeats: num_of_seats };\n\n        if (_.isEqual(inputCopy, values)) {\n          return null;\n        }\n        // an actual value change occured ->  update the parent state\n        setInputData({\n          errors: {},\n          data: {\n            ...values,\n            num_of_seats: values.numSeats,\n          },\n        });\n      } else {\n        // There is an error in the form input\n        if (_.isEqual(inputData.errors, errors)) {\n          return null;\n        }\n        // an actual error change occured ->  update the parent state\n        setInputData({\n          errors,\n          data: {},\n        });\n      }\n    }, DEBOUNCE_DELAY),\n    []\n  );\n\n  React.useEffect(() => {\n    debouncedSetAzur(values, validateForm, inputData, setInputData);\n  }, [values]);\n  return null;\n};\n\nexport default ParentStateUpdater;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useAzur from \"views/AzurDefault/hooks/useAzur\";\n\nexport const AzurContext = React.createContext();\n\nexport const AzurContextWrapper = ({ children }) => {\n  const [azurInput, setAzurInput] = React.useState({ data: {}, errors: {} });\n  const { data, loading, error } = useAzur(azurInput);\n\n  return (\n    <AzurContext.Provider\n      value={{\n        azurInput,\n        setAzurInput,\n        azurResponse: { data, loading, error },\n      }}\n    >\n      {children}\n    </AzurContext.Provider>\n  );\n};\n\nAzurContextWrapper.propTypes = { children: PropTypes.object };\n","import React from \"react\";\nimport _ from \"lodash\";\n\nexport default function useAzur(azurInput) {\n  const [data, setData] = React.useState({});\n  const [loading, setLoading] = React.useState(true);\n  const [error, setError] = React.useState(null);\n\n  const abortController = new AbortController();\n\n  //*** FETCHING AZUR OUTPUTS\n  const fetchAzur = async (azurInputUpdate) => {\n    setLoading(true);\n    // Parse Form Input into a form digestable for the API\n    const partyStrengthForApi = {};\n    azurInputUpdate.partyStrengths.forEach((entry) => {\n      partyStrengthForApi[entry.name] = entry.strength;\n    });\n\n    // useEffect itself should not be async according to linter, so we work with an anonymous function\n    fetch(\"https://azur-api.herokuapp.com/azur\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      signal: abortController.signal,\n      body: JSON.stringify({\n        votes: partyStrengthForApi,\n        method: azurInputUpdate.method,\n        num_of_seats: azurInputUpdate.num_of_seats,\n        return_table: true,\n      }),\n    })\n      .then(async (resp) => {\n        if (resp.ok) return resp.json();\n        else {\n          // error handling\n          const error = await resp.json();\n          let errorMessage = error?.message;\n          if (errorMessage == null) {\n            errorMessage = \"An unexpected error occured\";\n          }\n          throw new Error(errorMessage);\n        }\n      })\n      .then((azurResponse) => {\n        setError(null);\n        setData(azurResponse);\n        setLoading(false); // do not set loading=false in a finally block because it should not be set on an abortError\n      })\n      .catch((fetchingError) => {\n        if (fetchingError?.name === \"AbortError\") {\n          console.log(\"New Input - Aborted fetch\");\n        } else {\n          setData(null);\n          setError(fetchingError);\n          setLoading(false);\n        }\n      });\n  };\n\n  React.useEffect(() => {\n    if (_.isEmpty(azurInput?.errors)) {\n      if (\"partyStrengths\" in azurInput?.data) {\n        fetchAzur(azurInput.data);\n      }\n    }\n    return () => {\n      abortController.abort();\n    };\n  }, [azurInput]);\n\n  return { data, loading, error };\n}\n","import * as Yup from \"yup\";\n\n\nexport const numSeatsSchema = Yup.number()\n  .typeError(\"Dieses Feld darf lediglich Zahlen enthalten\")\n  .integer(\"Dieses Feld darf lediglich ganze Zahlen enthalten\")\n  .required(\"Dieses Feld muss ausgefüllt sein\")\n  .min(1, \"Die Anzahl der Einheiten muss größer als 1 sein.\")\n  .max(\n    100_000,\n    \"Berechnungen von mehr als 100 000 Einheiten wird nicht unterstützt\"\n  );\n\nexport const partyStrengthsSchema = Yup.array()\n  .of(\n    Yup.object().shape({\n      name: Yup.string()\n        .min(1, \"Mindestens ein Buchstabe als Name ist notwendig\")\n        .required(\"Dieses Feld muss ausgefüllt sein\"),\n      strength: Yup.number().integer(\"Dieses Feld darf lediglich Zahlen enthalten\")\n        .typeError(\"Dieses Feld darf lediglich ganze Zahlen enthalten\")\n        .required(\"Dieses Feld muss ausgefüllt sein\")\n        .min(0, \"Das Stärkeverhältnis muss größer als 0 sein.\")\n        .max(1_000_000_000, \"Jeder Fraktion dürfen maximal 1 000 000 000 Stimmen zukommen\")\n    })\n  )\n  .required(\"Es wird ein Input für die Fraktionsstärken benötigt\")\n  .min(1, \"Es wird mindestens eine Fraktion benötigt.\")\n  .test('test_for_duplicates', 'Es werden zwei Fraktionen mit dem selben Namen aufgeführt.', (partyStrengths) => {\n    const namesList = partyStrengths.map(({name}) => name)\n    return (new Set(namesList).size === namesList.length) // returns true if no duplicates exist\n  })\n\nexport const methodSchema = Yup.string().required(\"Dieses Feld wird benötigt.\")","import { Field } from \"formik\";\nimport { Input } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport _ from \"lodash\";\n\nFieldArrayInput.propTypes = {\n  fieldArrayName: PropTypes.string,\n  index: PropTypes.number,\n  fieldKey: PropTypes.string,\n  fieldType: PropTypes.string,\n  errors: PropTypes.object,\n};\n\nexport function FieldArrayInput({\n  fieldArrayName,\n  index,\n  fieldKey,\n  fieldType,\n  errors,\n  ...cssprops\n}) {\n  return (\n    <FieldInput\n      name={`${fieldArrayName}.${index}.${fieldKey}`}\n      errorMsg={\n        errorForFieldExists(_.get(errors, fieldArrayName), index, fieldKey)\n          ? _.get(errors, fieldArrayName)[index][fieldKey]\n          : null\n      }\n      type={fieldType}\n      {...cssprops}\n    />\n  );\n}\n\nFieldInput.propTypes = {\n  name: PropTypes.string,\n  errorMsg: PropTypes.string,\n  type: PropTypes.string,\n};\n\nexport function FieldInput({ name, errorMsg, type, ...cssprops }) {\n  return (\n    <Field\n      as={Input}\n      name={name}\n      layerStyle={errorMsg != null ? \"errorGlow\" : \"\"}\n      title={errorMsg != null ? errorMsg : \"\"}\n      type={type}\n      {...cssprops}\n    />\n  );\n}\n\nconst errorForFieldExists = (arrayErrors, index, fieldKey) => {\n  if (\n    arrayErrors != null &&\n    Array.isArray(arrayErrors) &&\n    Object.prototype.hasOwnProperty.call(arrayErrors, index) &&\n    arrayErrors[index][fieldKey] != null\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","import React from \"react\";\nimport { FieldArray } from \"formik\";\n\nimport { IoMdRemove } from \"react-icons/io\";\nimport { FieldArrayInput } from \"./FieldArrayInput\";\nimport PropTypes from \"prop-types\";\n\nimport { Box, Flex, Stack, Input, Button, Text } from \"@chakra-ui/react\";\nimport _ from \"lodash\";\n\nconst PartyStrengthsFieldArray = ({\n  values,\n  errors,\n  fieldArrayName,\n  MAX_FRACTIONS,\n}) => {\n  const partyStrengths = _.get(values, fieldArrayName);\n  const errorsPartyStrengths = _.get(errors, fieldArrayName);\n\n  return (\n    <Box>\n      <FieldArray name={fieldArrayName}>\n        {({ remove, push }) => (\n          <Stack\n            layerStyle={\n              errorsPartyStrengths != null &&\n              typeof errorsPartyStrengths === \"string\"\n                ? \"errorGlow\"\n                : \"\"\n            }\n            title={\n              errorsPartyStrengths != null &&\n              typeof errorsPartyStrengths === \"string\"\n                ? errorsPartyStrengths\n                : \"Fraktionsstärken\"\n            }\n          >\n            {partyStrengths.length > 0 &&\n              partyStrengths.map((_, index) => (\n                <Flex key={index} flexDirection=\"row\">\n                  <FieldArrayInput\n                    fieldKey=\"name\"\n                    fieldArrayName={fieldArrayName}\n                    index={index}\n                    fieldType=\"text\"\n                    errors={errors}\n                    flexGrow=\"3\"\n                    width=\"0px\" //overwrites default size=20 prop from html (min length of 20 chars)\n                    ml={0}\n                  />\n                  <FieldArrayInput\n                    fieldKey=\"strength\"\n                    fieldArrayName={fieldArrayName}\n                    index={index}\n                    width=\"0px\"\n                    flexGrow=\"1\"\n                    fieldType=\"number\"\n                    textAlign=\"center\"\n                    errors={errors}\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    isDisabled={partyStrengths.length <= 1}\n                    m={0}\n                    width=\"3ex\"\n                    title={\n                      partyStrengths.length > 1\n                        ? \"Fraktion entfernen\"\n                        : \"Fraktion kann nicht entfernt werden, da es mindestens eine Fraktion geben muss.\"\n                    }\n                    onClick={() => remove(index)}\n                  >\n                    <IoMdRemove />\n                  </Button>\n                </Flex>\n              ))}\n\n            {/*ADD FRACTION*/}\n            <Button\n              variant=\"ghost\"\n              _hover={{\n                backgroundColor: \"brand.darkBlueAlpha.300\",\n              }}\n              px={0}\n              m={0}\n              width={\"100%\"}\n              isDisabled={partyStrengths.length >= MAX_FRACTIONS}\n              title={\n                partyStrengths.length < MAX_FRACTIONS\n                  ? \"Fraktion hinzufügen\"\n                  : `Es können keine weiteren Fraktion hinzugefügt werden. Dieser Rechner unterstützt maximal ${MAX_FRACTIONS} Einträge für Fraktionen.`\n              }\n              onClick={() => push({ name: \"Fraktion XYZ\", strength: 0 })}\n            >\n              <Flex flexDirection=\"row\" m={0} width={\"100%\"}>\n                <Input\n                  ml={0}\n                  width=\"0px\"\n                  flexGrow=\"3\"\n                  disabled\n                  variant=\"fakeInput\"\n                />\n                <Input width=\"0px\" flexGrow=\"1\" disabled variant=\"fakeInput\" />\n                <Button\n                  width=\"3ex\"\n                  as=\"span\"\n                  m={0}\n                  variant=\"ghost\"\n                  pointerEvents=\"none\"\n                >\n                  <Text color=\"blackAlpha.400\">+</Text>\n                </Button>\n              </Flex>\n            </Button>\n          </Stack>\n        )}\n      </FieldArray>\n    </Box>\n  );\n};\n\nPartyStrengthsFieldArray.propTypes = {\n  values: PropTypes.object,\n  errors: PropTypes.object,\n  fieldArrayName: PropTypes.string,\n  MAX_FRACTIONS: PropTypes.number,\n};\n\nexport default PartyStrengthsFieldArray;\n","import React from \"react\";\nimport { Button } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\n\nPresetButton.propTypes = {\n  setFieldValue: PropTypes.func,\n  activeValue: PropTypes.any,\n  presetData: PropTypes.any,\n  attributeName: PropTypes.string,\n  children: PropTypes.string,\n};\n\nexport default function PresetButton({\n  activeValue,\n  presetData,\n  attributeName,\n  setFieldValue,\n  children,\n  ...cssprops\n}) {\n  return (\n    <Button\n      variant={`${_.isEqual(activeValue, presetData) ? \"active\" : \"outline\"}`}\n      onClick={() => {\n        setFieldValue(attributeName, presetData);\n      }}\n      {...cssprops}\n    >\n      {children}\n    </Button>\n  );\n}\n","import { Heading, Grid, GridItem, Box } from \"@chakra-ui/react\";\nimport PartyStrengthsFieldArray from \"components/forms/PartyStrengthsFieldArray\";\nimport _ from \"lodash\";\nimport React from \"react\";\nimport bundestagMandatsverteilung from \"utils/bundestagMandate.json\";\nimport PresetButton from \"./PresetButton\";\nimport PropTypes from \"prop-types\";\n\nconst PartyStrengthsInput = ({\n  values,\n  errors,\n  setFieldValue,\n  MAX_FRACTIONS,\n  attributeKey,\n}) => {\n  return (\n    <Box>\n      <Heading as=\"h4\" size=\"lg\">\n        Voreinstellungen\n      </Heading>\n      <PartyStrengthsPresetButtons\n        values={values}\n        setFieldValue={setFieldValue}\n        partyStrengthsKey={attributeKey}\n      />\n      <Heading as=\"h4\" size=\"lg\">\n        Manuelle Eingabe\n      </Heading>\n      <PartyStrengthsFieldArray\n        fieldArrayName={attributeKey}\n        values={values}\n        errors={errors}\n        MAX_FRACTIONS={MAX_FRACTIONS}\n      />\n    </Box>\n  );\n};\n\nPartyStrengthsInput.propTypes = {\n  values: PropTypes.object,\n  errors: PropTypes.object,\n  setFieldValue: PropTypes.func,\n  MAX_FRACTIONS: PropTypes.number,\n  attributeKey: PropTypes.string,\n};\n\nexport default PartyStrengthsInput;\n\nconst PartyStrengthsPresetButtons = ({\n  values,\n  setFieldValue,\n  partyStrengthsKey,\n}) => {\n  return (\n    <Grid\n      columnGap={3}\n      rowGap={3}\n      templateColumns=\"repeat(auto-fit, minmax(15ex, 1fr))\" // TODO back to minmax( 15ex or have them always take full width)\n    >\n      {bundestagMandatsverteilung.map((mandatePreset) => (\n        <GridItem key={mandatePreset.key}>\n          <PresetButton\n            activeValue={_.get(values, partyStrengthsKey, [])}\n            presetData={mandatePreset.data}\n            attributeName={partyStrengthsKey}\n            setFieldValue={setFieldValue}\n            width=\"100%\"\n            m={0}\n            title={\n              mandatePreset?.label != null\n                ? mandatePreset.label\n                : \"Voreinstellung für Fraktionsstärken - Klicken um zu aktivieren\"\n            }\n          >\n            {mandatePreset.title}\n          </PresetButton>\n        </GridItem>\n      ))}\n    </Grid>\n  );\n};\n\nPartyStrengthsPresetButtons.propTypes = {\n  values: PropTypes.object,\n  setFieldValue: PropTypes.func,\n  partyStrengthsKey: PropTypes.string,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Heading, Grid, GridItem } from \"@chakra-ui/react\";\nimport constants from \"utils/constants.json\";\nimport PresetButton from \"./PresetButton\";\nimport _ from \"lodash\";\n\nconst MethodsInput = ({ values, attributeKey, setFieldValue }) => {\n  return (\n    <>\n      <Heading as=\"h3\" size=\"xl\">\n        Mathematische Verfahren\n      </Heading>\n      <Grid\n        columnGap={3}\n        rowGap={3}\n        templateColumns=\"repeat(auto-fit, minmax(15ex, 1fr))\"\n      >\n        {constants.azurMethods.map((method) => {\n          return (\n            <GridItem key={method.apiName}>\n              <PresetButton\n                activeValue={_.get(values, attributeKey, [])}\n                presetData={method.apiName}\n                attributeName={attributeKey}\n                setFieldValue={setFieldValue}\n                width=\"100%\"\n              >\n                {method.title}\n              </PresetButton>\n            </GridItem>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n\nMethodsInput.propTypes = {\n  values: PropTypes.object,\n  attributeKey: PropTypes.string,\n  setFieldValue: PropTypes.func,\n};\n\nexport default MethodsInput;\n","import { Center, Text, Tooltip, HStack, Heading } from \"@chakra-ui/react\";\nimport { Form, useFormikContext } from \"formik\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { FieldInput } from \"components/forms/FieldArrayInput\";\nimport PartyStrengthsInput from \"components/forms/PartyStrengthsInput\";\nimport MethodsInput from \"components/forms/MethodsInput\";\nimport { FaInfoCircle } from \"react-icons/fa\";\n\nAzurForm.propTypes = {\n  ParentStateUpdater: PropTypes.func,\n};\n\nexport default function AzurForm({ ParentStateUpdater }) {\n  const { values, errors, setFieldValue } = useFormikContext();\n\n  const MAX_FRACTIONS = 15;\n\n  return (\n    <Form>\n      {/* NUM SEATS */}\n      <Center flexDirection=\"column\">\n        <FieldInput\n          name=\"numSeats\"\n          type=\"number\"\n          errorMsg={errors?.numSeats}\n          fontSize=\"4xl\" /* \n          fontWeight=\"bold\" */\n          textAlign=\"center\"\n          color=\"black\"\n          width=\"6ex\" /* have to limit for now as otherwise the html-size prop makes this field very wide */\n          p=\"1\"\n          py=\"0\"\n          height=\"auto\"\n        />\n        <Tooltip label=\"z.B. Zahl der Sitze, Redeminuten oder Räume, die Sie verteilen möchten\">\n          <HStack alignItems=\"center\" spacing=\"1ex\">\n            <Text fontSize=\"xl\">Einheiten</Text>\n            <FaInfoCircle fontSize=\"1.2rem\" />\n          </HStack>\n        </Tooltip>\n      </Center>\n      <Heading as=\"h3\" size=\"xl\">\n        Fraktionsstärken\n      </Heading>\n      <PartyStrengthsInput\n        values={values}\n        errors={errors}\n        setFieldValue={setFieldValue}\n        MAX_FRACTIONS={MAX_FRACTIONS}\n        attributeKey=\"partyStrengths\"\n      />\n      <MethodsInput\n        values={values}\n        setFieldValue={setFieldValue}\n        attributeKey=\"method\"\n      />\n      <ParentStateUpdater />\n    </Form>\n  );\n}\n","import { Flex, Heading } from \"@chakra-ui/react\";\nimport Card from \"theme/Card\";\nimport ParentStateUpdater from \"components/forms/ParentStateUpdater\";\nimport { Formik, useFormikContext } from \"formik\";\nimport React, { useContext } from \"react\";\nimport { AzurContext } from \"context/AzurContext\";\nimport bundestagMandatsverteilung from \"utils/bundestagMandate.json\";\nimport {\n  methodSchema,\n  numSeatsSchema,\n  partyStrengthsSchema,\n} from \"utils/inputValidationSchemes\";\nimport * as Yup from \"yup\";\nimport AzurForm from \"./AzurForm\";\n\nfunction AzurInputs({ ...cssprops }) {\n  // Initial Values\n  const initialValues = {\n    numSeats: 60,\n    method: \"schepers\",\n    partyStrengths: bundestagMandatsverteilung[0].data,\n  };\n\n  const { azurInput, setAzurInput } = useContext(AzurContext);\n  const schema = Yup.object().shape({\n    numSeats: numSeatsSchema,\n    partyStrengths: partyStrengthsSchema,\n    method: methodSchema,\n  });\n\n  // Validate is manually triggered in useEffect\n  return (\n    <Card {...cssprops}>\n      <Flex>\n        <Heading size=\"2xl\">Filter</Heading>\n      </Flex>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        validateOnChange={false}\n        validateOnBlur={false}\n      >\n        <AzurForm\n          ParentStateUpdater={() => {\n            const { values, validateForm } = useFormikContext();\n            return (\n              <ParentStateUpdater\n                values={values}\n                validateForm={validateForm}\n                inputData={azurInput}\n                setInputData={setAzurInput}\n              />\n            );\n          }}\n        />\n      </Formik>\n    </Card>\n  );\n}\n\nexport default AzurInputs;\n","import * as d3 from \"d3\";\nimport constants from '../utils/constants.json'\n\n\nexport function getPartyColor(partyName, index, partyArrayLength){\n    const colorScale = d3.scaleLinear().domain([1, partyArrayLength]).range([\"#333\", \"#EEE\"])\n    const partyColors = constants.partyColors\n    if(partyName in constants.partyAltNamesMapping){\n        partyName = constants.partyAltNamesMapping[partyName]\n    }\n\n    if(partyName in partyColors){\n        return partyColors[partyName]\n    }else{\n      return colorScale(index)\n    }\n}","import React, { useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport PropTypes from \"prop-types\";\nimport { Box } from \"@chakra-ui/layout\";\nimport { getPartyColor } from \"../utils/getPartyColor\";\n\nPieChart.propTypes = {\n  data: PropTypes.object,\n  outerRadius: PropTypes.number,\n  innerRadius: PropTypes.number,\n};\n\nfunction PieChart({ data, outerRadius, innerRadius }) {\n  const width = 2 * outerRadius;\n  const height = 2 * outerRadius;\n\n  useEffect(() => {\n    drawChart();\n  }, [data]);\n\n  function drawChart() {\n    const parsedData = Object.entries(data).map(([key, value]) => {\n      return {\n        label: key,\n        value: value,\n      };\n    });\n\n    // Remove the old svg\n    // TODO: Do not selecet by ID to make this component reusable (or go for a more complex id)\n    d3.select(\"#pie-container\").select(\"svg\").remove(); // Create new svg\n    const svg = d3\n      .select(\"#pie-container\")\n      .append(\"svg\")\n      .attr(\"width\", width)\n      .attr(\"height\", height)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${width / 2}, ${height / 2})`);\n\n    const arcGenerator = d3\n      .arc()\n      .innerRadius(innerRadius)\n      .outerRadius(outerRadius);\n    const pieGenerator = d3\n      .pie()\n      .padAngle(0)\n      .value((d) => d.value);\n\n    const arc = svg.selectAll().data(pieGenerator(parsedData)).enter();\n\n    // Append sectors\n    arc\n      .append(\"path\")\n      .attr(\"d\", arcGenerator)\n      .style(\"fill\", (arc, i) => {\n        let partyName = arc.data.label;\n        return getPartyColor(partyName, i, parsedData.length);\n      })\n      .append(\"svg:title\")\n      .text((arc) => {\n        return `${arc.data.label}\\n${arc.data.value}`;\n      })\n      .style(\"stroke\", \"#ffffff\")\n      .style(\"stroke-width\", 0); // Append text labels\n\n    /* arc\n      .append(\"text\")\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"alignment-baseline\", \"middle\")\n      .text((d) => d.data.label)\n      .style(\"fill\", \"#ffffff\")\n      .attr(\"transform\", (d) => {\n        const [x, y] = arcGenerator.centroid(d);\n        return `translate(${x}, ${y})`;\n      }); */\n  }\n\n  return <Box id=\"pie-container\" display=\"inline-block\" width=\"auto\" m={1} />;\n}\n\nexport default PieChart;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PieChart from \"components/PieChart\";\nimport {\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  Flex,\n  Center,\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n} from \"@chakra-ui/react\";\n\nimport { useTheme } from \"@chakra-ui/react\";\n\nDistributionOutput.propTypes = {\n  seatSplit: PropTypes.object,\n  isAmbiguous: PropTypes.bool,\n  azurInput: PropTypes.object,\n};\n\nexport default function DistributionOutput({\n  isAmbiguous,\n  seatSplit,\n  azurInput,\n}) {\n  const sizes = useTheme().sizes;\n  const innerWidthPx = convertRemToPixels(sizes[20]);\n  const outerWidthPx = convertRemToPixels(sizes[56]);\n\n  // sort output by the input order of parties\n  const partyNamesSorted = azurInput?.partyStrengths.map((entry) => entry.name);\n  const seatSplitSorted = {};\n\n  partyNamesSorted.forEach((partyName) => {\n    seatSplitSorted[partyName] = seatSplit[partyName];\n  });\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Center my=\"10\">\n        <Table size=\"md\">\n          <Thead>\n            <Tr>\n              {Object.keys(seatSplitSorted).map((fractionName) => (\n                <Th key={fractionName}>{fractionName} </Th>\n              ))}\n            </Tr>\n          </Thead>\n          <Tbody>\n            <Tr>\n              {Object.entries(seatSplitSorted).map(\n                ([fractionName, fractionStrength]) => (\n                  <Td key={fractionName}>\n                    {Array.isArray(fractionStrength)\n                      ? fractionStrength.join(\" oder \")\n                      : fractionStrength}\n                  </Td>\n                )\n              )}\n            </Tr>\n          </Tbody>\n        </Table>\n      </Center>\n      <Center>\n        {isAmbiguous ? (\n          <Alert status=\"warning\">\n            <AlertIcon />\n            <AlertTitle mr={2}>Mehrdeutiges Ergebnis</AlertTitle>\n            <AlertDescription>\n              Es lässt sich kein eindeutiges Ergebnis für diese Eingabe\n              berechnen. Das heißt, dass die Einheiten nicht eindeutig\n              bestimmten Fraktionen zugewiesen werden können. Es kann helfen\n              eine andere mathematische Methode zu wählen, oder diese\n              Verteilungsgröße zu vermeiden.\n            </AlertDescription>\n          </Alert>\n        ) : (\n          <PieChart\n            data={seatSplitSorted}\n            outerRadius={outerWidthPx}\n            innerRadius={innerWidthPx}\n          />\n        )}\n      </Center>\n    </Flex>\n  );\n}\n\nfunction convertRemToPixels(rem) {\n  return (\n    parseFloat(rem) *\n    parseFloat(getComputedStyle(document.documentElement).fontSize)\n  );\n}\n","import { Icon } from \"@chakra-ui/icons\";\nimport { Circle, Flex, Text, Box } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { getPartyColor } from \"utils/getPartyColor\";\nimport _ from \"lodash\";\n\nexport const PositionCell = ({ cell }) => {\n  return (\n    <Flex justifyContent=\"center\">\n      <Circle size=\"3ex\" bg=\"brand.backgroundGrey\" color=\"black\">\n        <Text fontWeight=\"bold\">{cell.value}</Text>\n      </Circle>\n    </Flex>\n  );\n};\n\nPositionCell.propTypes = {\n  cell: PropTypes.object,\n};\n\nexport function AssignmentCell({ cell, tableData }) {\n  const value = cell?.value;\n  if (Array.isArray(value)) {\n    return \"Mehrdeutig! \" + parseSeatCountOutput(value);\n  } else {\n    const partyNames = Object.keys(tableData[0].seats);\n    const totalPartyCount = partyNames.length;\n    const index = partyNames.findIndex((elem) => elem == value);\n    const partyColor = getPartyColor(value, index, totalPartyCount);\n\n    const CircleIcon = (props) => (\n      <Icon viewBox=\"0 0 200 200\" {...props}>\n        <path\n          fill=\"currentColor\"\n          d=\"M 100, 100 m -75, 0 a 75,75 0 1,0 150,0 a 75,75 0 1,0 -150,0\"\n        />\n      </Icon>\n    );\n\n    return (\n      <Flex align=\"center\">\n        <Text flex={1} textAlign=\"center\">\n          {value}\n        </Text>\n        <CircleIcon color={partyColor} mr={2} boxSize={12} />\n      </Flex>\n    );\n  }\n}\nAssignmentCell.propTypes = {\n  cell: PropTypes.object,\n  tableData: PropTypes.array,\n};\n\nexport const SeatCountCell = ({ cell }) => {\n  return <SeatCountCellBase cell={cell} />;\n};\n\nSeatCountCell.propTypes = {\n  cell: PropTypes.object,\n};\n\nconst SeatCountCellBase = ({ cell }) => {\n  if (cell?.value == null) {\n    return \"loading...\";\n  }\n  const value = cell.value;\n\n  if (Array.isArray(value)) {\n    return (\n      <Box layerStyle=\"ambiguityContainerHighlight\">\n        <Text color=\"brand.orange\">Mehrdeutig!</Text>\n        <Text>{parseSeatCountOutput(value)}</Text>\n      </Box>\n    );\n  } else {\n    if (\n      _.has(cell, \"row.original.seat_goes_to\") &&\n      _.has(cell, \"column.Header\")\n    ) {\n      if (cell.row.original.seat_goes_to == cell.column.Header) {\n        return <Box fontWeight=\"bold\">{value}</Box>;\n      }\n    }\n\n    return value;\n  }\n};\n\nSeatCountCellBase.propTypes = {\n  cell: PropTypes.object,\n};\n\nexport const parseSeatCountOutput = (value) => {\n  if (Array.isArray(value)) {\n    return value.join(\" oder \");\n  }\n  return value;\n};\n\nexport const ComparisonCell = ({ cell, row }) => {\n  const partyName = cell?.column?.partyName;\n  if (row.original.is_identical) {\n    return <SeatCountCellBase cell={cell} />;\n  } else {\n    let valueA = row.original.dist_A.seats?.[partyName] || 0;\n    let valueB = row.original.dist_B.seats?.[partyName] || 0;\n\n    if (valueA != valueB) {\n      return `${parseSeatCountOutput(valueA)} \\u2192 ${parseSeatCountOutput(\n        valueB\n      )}`;\n    } else {\n      return valueA;\n    }\n  }\n};\n\nComparisonCell.propTypes = {\n  cell: PropTypes.object,\n  row: PropTypes.object,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Flex, Input } from \"@chakra-ui/react\";\n\nNumberRangeColumnFilter.propTypes = {\n  column: PropTypes.object,\n};\n\nexport default function NumberRangeColumnFilter({ column }) {\n  const { filterValue = [], preFilteredRows, setFilter } = column;\n  const [min, max] = React.useMemo(\n    () => [1, preFilteredRows.length],\n    [preFilteredRows]\n  );\n\n  return (\n    <Flex align=\"center\">\n      <Input\n        value={filterValue[0] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            val ? parseInt(val, 10) : undefined,\n            old[1],\n          ]);\n        }}\n        placeholder={`${min}`}\n        width=\"8ex\"\n        mr=\"1ex\"\n      />\n      bis\n      <Input\n        value={filterValue[1] || \"\"}\n        type=\"number\"\n        onChange={(e) => {\n          const val = e.target.value;\n          setFilter((old = []) => [\n            old[0],\n            val ? parseInt(val, 10) : undefined,\n          ]);\n        }}\n        placeholder={`${max}`}\n        width=\"8ex\"\n        ml=\"1ex\"\n      />\n    </Flex>\n  );\n}\n","import {\n  Flex,\n  NumberInput,\n  NumberInputField,\n  NumberInputStepper,\n  NumberIncrementStepper,\n  NumberDecrementStepper,\n  Select,\n  Text,\n} from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nexport const PageSelect = ({\n  pageOptions,\n  gotoPage,\n  state: { pageIndex },\n  ...cssprops\n}) => {\n  return (\n    <Flex alignItems=\"center\" {...cssprops}>\n      <Text ml={2} flexShrink=\"0\">\n        Seite\n      </Text>\n      <NumberInput\n        w=\"10.5ex\"\n        p={0}\n        mx={2}\n        min={1}\n        max={pageOptions.length}\n        onChange={(value) => {\n          const page = value ? value - 1 : 0;\n          gotoPage(page);\n        }}\n        defaultValue={pageIndex + 1}\n      >\n        <NumberInputField />\n        <NumberInputStepper>\n          <NumberIncrementStepper />\n          <NumberDecrementStepper />\n        </NumberInputStepper>\n      </NumberInput>\n      <Text mr={2}>von {pageOptions.length}</Text>\n    </Flex>\n  );\n};\n\nPageSelect.propTypes = {\n  pageOptions: PropTypes.array,\n  gotoPage: PropTypes.func,\n  state: PropTypes.object,\n};\n\nexport const SelectPageLength = ({ pageSize, setPageSize }) => {\n  return (\n    <Flex>\n      <Select\n        w={40}\n        mr={2}\n        value={pageSize}\n        onChange={(e) => {\n          setPageSize(Number(e.target.value));\n        }}\n      >\n        {[8, 10, 20, 50, 100].map((pageSize) => (\n          <option key={pageSize} value={pageSize}>\n            {pageSize} pro Seite\n          </option>\n        ))}\n      </Select>\n    </Flex>\n  );\n};\n\nSelectPageLength.propTypes = {\n  pageSize: PropTypes.number,\n  setPageSize: PropTypes.func,\n};\n","import { Box, Table, Tbody, Td, Th, Thead, Tr } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nconst RawTable = ({\n  getTableProps,\n  getTableBodyProps,\n  headerGroups,\n  prepareRow,\n  page,\n  getRowProps = () => ({}),\n}) => {\n  return (\n    <Box maxWidth=\"100%\">\n      <Table {...getTableProps()} variant=\"stickyHeader\">\n        <Thead>\n          {headerGroups.map((headerGroup, index) => (\n            <Tr\n              key={`headerGroup:${index}`}\n              {...headerGroup.getHeaderGroupProps()}\n            >\n              {headerGroup.headers.map((column) => (\n                <Th key={column.header} {...column.getHeaderProps()}>\n                  {column.render(\"Header\")}\n                </Th>\n              ))}\n            </Tr>\n          ))}\n        </Thead>\n        <Tbody {...getTableBodyProps()}>\n          {page.map((row) => {\n            prepareRow(row);\n            return (\n              <Tr key={row?.id} {...row.getRowProps(getRowProps(row))}>\n                {row.cells.map((cell) => (\n                  <Td {...cell.getCellProps()} key={cell?.column?.id + row?.id}>\n                    {cell.render(\"Cell\")}\n                  </Td>\n                ))}\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n    </Box>\n  );\n};\n\nRawTable.propTypes = {\n  getTableProps: PropTypes.func,\n  getTableBodyProps: PropTypes.func,\n  headerGroups: PropTypes.array,\n  prepareRow: PropTypes.func,\n  page: PropTypes.array,\n  getRowProps: PropTypes.func,\n};\n\nexport default RawTable;\n","import { HStack, Spinner, VStack } from \"@chakra-ui/react\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { useFilters, usePagination, useTable } from \"react-table\";\nimport { PositionCell } from \"./CellRenders\";\nimport NumberRangeFilter from \"./NumberRangeFilter\";\nimport { PageSelect, SelectPageLength } from \"./Pagination\";\nimport RawTable from \"./RawTable\";\n\nDataTable.propTypes = {\n  data: PropTypes.array,\n  columns: PropTypes.array,\n  getRowProps: PropTypes.func,\n};\n\nconst DEFAULT_PAGE_SIZE = 20;\n\nexport default function DataTable({ data, columns, getRowProps = () => ({}) }) {\n  const defaultColumn = React.useMemo(\n    () => ({\n      disableFilters: true,\n    }),\n    []\n  );\n\n  const startHeaders = [\n    {\n      Header: \"\",\n      id: \"index\",\n      accessor: (_row, i) => i + 1,\n      Cell: PositionCell,\n      disableFilters: false,\n      defaultCanFilter: true,\n      Filter: NumberRangeFilter,\n      filter: \"between\",\n    },\n  ];\n\n  const dataMemo = React.useMemo(() => {\n    if (data == null) {\n      return [];\n    }\n    return data;\n  }, [data]);\n\n  const colsMemo = React.useMemo(() => {\n    if (columns == null) {\n      return [];\n    }\n    return startHeaders.concat(columns);\n  }, [columns]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, //  page only has the rows for the active page (used instead of 'rows')\n    pageOptions,\n    gotoPage,\n    setPageSize,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    { columns: colsMemo, data: dataMemo, defaultColumn },\n    useFilters,\n    usePagination\n  );\n\n  React.useEffect(() => {\n    // sets the default page size for the table\n    setPageSize(DEFAULT_PAGE_SIZE);\n  }, []);\n  return (\n    <>\n      {columns == undefined || data == undefined ? (\n        <Spinner />\n      ) : (\n        <VStack maxWidth=\"100%\">\n          {/*<HStack> // filter rows with this filter\n            <Text mr=\"2ex\">Anzeigen von</Text>\n            <IndexFilter headerGroups={headerGroups} />\n          </HStack> */}\n          <HStack maxWidth=\"100%\">\n            <RawTable\n              getTableProps={getTableProps}\n              getTableBodyProps={getTableBodyProps}\n              headerGroups={headerGroups}\n              prepareRow={prepareRow}\n              page={page}\n              getRowProps={getRowProps}\n            />\n          </HStack>\n\n          <HStack alignItems=\"center\" spacing=\"3ex\">\n            <PageSelect\n              pageOptions={pageOptions}\n              gotoPage={gotoPage}\n              state={{ pageIndex, pageSize }}\n            />\n            <SelectPageLength pageSize={pageSize} setPageSize={setPageSize} />\n          </HStack>\n        </VStack>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport { AssignmentCell } from \"components/tables/CellRenders\";\n\nimport DataTable from \"components/tables/DataTable\";\n\nAssignmentSeq.propTypes = {\n  assignmentSequence: PropTypes.array,\n  tableData: PropTypes.array,\n};\n\nexport default function AssignmentSeq({ assignmentSequence, tableData }) {\n  const columns = [\n    {\n      Header: \"Zugriff\",\n      accessor: \"seat_goes_to\", // accessor is the \"key\" in the data\n      disableFilters: true,\n      Cell: ({ cell }) => AssignmentCell({ cell, tableData }),\n    },\n  ];\n\n  return <DataTable data={assignmentSequence} columns={columns} />;\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DataTable from \"components/tables/DataTable\";\nimport _ from \"lodash\";\n\nimport { SeatCountCell } from \"components/tables/CellRenders\";\nTableOutput.propTypes = {\n  tableData: PropTypes.array,\n  assignmentSequence: PropTypes.array,\n  azurInput: PropTypes.object,\n};\n\nexport default function TableOutput({\n  tableData,\n  assignmentSequence,\n  azurInput,\n}) {\n  let columns = [];\n  let data = [];\n\n  if (tableData != null && Array.isArray(tableData) && tableData.length >= 1) {\n    // set up columns\n\n    // pull partyNames from input so output has same order as input\n    const partyNames = azurInput?.partyStrengths.map((entry) => entry.name);\n    columns = partyNames.map((partyName) => {\n      return {\n        Header: partyName,\n        accessor: \"seats.\" + partyName, // we want to access the seats subitem\n        isNumeric: true,\n        Cell: SeatCountCell,\n      };\n    });\n\n    if (_.isEmpty(assignmentSequence)) {\n      data = tableData;\n    } else {\n      data = tableData.map((tableRow, i) => {\n        return {\n          seat_goes_to: assignmentSequence[i].seat_goes_to,\n          ...tableRow,\n        };\n      });\n    }\n  }\n  return (\n    <DataTable\n      data={data}\n      columns={columns}\n      getRowProps={(row) => {\n        return {\n          layerStyle: row?.original?.is_ambiguous ? \"ambigousRowHighlight\" : \"\",\n        };\n      }}\n    />\n  );\n}\n","import React from \"react\";\n\nimport { HStack, Text, Button } from \"@chakra-ui/react\";\nimport { FaPrint } from \"react-icons/fa\";\n\nconst ExportIcons = () => {\n  return (\n    <HStack spacing=\"0\">\n      {/* // export button\n      <Button variant=\"outline\">\n        <HStack align=\"center\" spacing=\"0.3rem\">\n          <FaFileCsv />\n          <Text fontWeight=\"normal\" fontSize=\"sm\">\n            Exportieren\n          </Text>\n        </HStack>\n      </Button>\n      */}\n      <Button\n        variant=\"outline\"\n        onClick={() => {\n          // unfortunately \"beforeprint\" did not realiably execute before the print preview is shown\n          // therefore we are manually dispatching it here and waiting for a short time before actually calling the print\n          window.dispatchEvent(new Event(\"beforeprint\"));\n          window.setTimeout(() => {\n            window.print();\n          }, 150);\n        }}\n      >\n        <HStack spacing=\"0.3rem\">\n          <FaPrint />\n          <Text fontWeight=\"normal\" fontSize=\"sm\">\n            Drucken\n          </Text>\n        </HStack>\n      </Button>\n    </HStack>\n  );\n};\n\nexport default ExportIcons;\n","import React from \"react\";\nimport DistributionOutput from \"./DistributionOutput\";\nimport AssignmentSeq from \"./AssignmentSeq\";\nimport TableOutput from \"./TableOutput\";\nimport ExportIcons from \"./ExportIcons\";\n\nimport {\n  Tabs,\n  TabList,\n  TabPanels,\n  Tab,\n  TabPanel,\n  Spinner,\n  Center,\n  Flex,\n} from \"@chakra-ui/react\";\n\nimport PropTypes from \"prop-types\";\n\nOutputTabs.propTypes = {\n  azurInput: PropTypes.object,\n  azurResponse: PropTypes.object,\n  loading: PropTypes.bool,\n};\n\nexport default function OutputTabs({ azurInput, azurResponse, loading }) {\n  React.useEffect(() => {\n    if (azurInput.method === \"hare\") {\n      // if we are on assignmentSequence we should switch tabs as it does not exist for Hare\n      if (tabIndex === 1) {\n        setTabIndex(0);\n      }\n    }\n  }, [azurInput]);\n\n  const [tabIndex, setTabIndex] = React.useState(0);\n\n  const handleTabsChange = (index) => {\n    setTabIndex(index);\n  };\n\n  const selectedStyle = {\n    color: \"brand.darkBlue\",\n    boderColor: \"brand.darkBlue\",\n    border: \"1px solid\",\n    borderBottom: \"none\",\n    boxShadow: \"0px 2px 0px -1px white\",\n  };\n  return (\n    <Tabs mt=\"10\" align=\"left\" index={tabIndex} onChange={handleTabsChange}>\n      <Flex justifyContent=\"space-between\" alignItems=\"end\">\n        <TabList>\n          <Tab fontSize=\"lg\" _selected={selectedStyle}>\n            Anteile\n          </Tab>\n          <Tab\n            fontSize=\"lg\"\n            _selected={selectedStyle}\n            title={\n              azurInput.method === \"hare\"\n                ? `Bei der mathematischen Berechnungsmethode Hare/Niemeyer entsteht keine Zugriffsreihenfolge. Probieren Sie eine andere Methode.`\n                : `Reihenfolge in der die einzelnen Einheiten an die Fraktionen vergeben werden.`\n            }\n            isDisabled={azurInput.method === \"hare\"}\n          >\n            Reihenfolge\n          </Tab>\n          <Tab\n            fontSize=\"lg\"\n            _selected={selectedStyle}\n            title={`Tabellarische Übersicht für die Verteilmassen von 1 bis ${azurInput.numSeats}`}\n          >\n            Tabelle\n          </Tab>\n        </TabList>\n        <ExportIcons azurResponse={azurResponse} azurInput={azurInput} />\n      </Flex>\n\n      {loading ? (\n        <Center minHeight=\"40em\">\n          <Spinner size=\"xl\" color=\"brand.orange\" />\n        </Center>\n      ) : (\n        <TabPanels>\n          <TabPanel>\n            <DistributionOutput\n              isAmbiguous={azurResponse.distribution.is_ambiguous}\n              seatSplit={azurResponse.distribution.seats}\n              azurInput={azurInput}\n            />\n          </TabPanel>\n          <TabPanel>\n            <AssignmentSeq\n              tableData={azurResponse.table}\n              assignmentSequence={azurResponse.assignment_sequence}\n            />\n          </TabPanel>\n          <TabPanel>\n            <TableOutput\n              tableData={azurResponse.table}\n              assignmentSequence={azurResponse.assignment_sequence}\n              azurInput={azurInput}\n            />\n          </TabPanel>\n        </TabPanels>\n      )}\n    </Tabs>\n  );\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Text,\n} from \"@chakra-ui/react\";\n\nexport const InputErrorFeedback = ({ inputErrors }) => {\n  return (\n    <Alert status=\"error\">\n      <AlertIcon />\n      <AlertTitle mr={2}>Ungültige Eingabe!</AlertTitle>\n      <AlertDescription>\n        {inputErrors.numSeats != null && (\n          <>\n            <Text mt={3} fontWeight=\"bold\">\n              Fehler bei der Eingabe der Einheiten\n            </Text>\n            <Text>{inputErrors.numSeats}</Text>\n          </>\n        )}\n        {inputErrors.partyStrengths != null && (\n          <>\n            <Text mt={3} fontWeight=\"bold\">\n              Fehler bei der Eingabe der Fraktionsstärken\n            </Text>\n            {typeof inputErrors.partyStrengths === \"string\" ? ( // Errors that are on FieldArray Level\n              <Text>{inputErrors.partyStrengths}</Text>\n            ) : (\n              inputErrors.partyStrengths.map((errorEntry, index) => {\n                return errorEntry.strength ? (\n                  <Text key={index + \"strengthError\"}>\n                    {errorEntry.strength}\n                  </Text>\n                ) : (\n                  <Text key={index + \"nameError\"}>{errorEntry.name}</Text>\n                );\n              })\n            )}\n          </>\n        )}\n      </AlertDescription>\n    </Alert>\n  );\n};\n\nInputErrorFeedback.propTypes = {\n  inputErrors: PropTypes.object,\n};\n\nexport default InputErrorFeedback;\n","import {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n  Flex,\n  Heading,\n  Text,\n} from \"@chakra-ui/react\";\nimport _ from \"lodash\";\nimport OutputTabs from \"./OutputTabs\";\nimport React, { useContext } from \"react\";\nimport { AzurContext } from \"context/AzurContext\";\nimport Card from \"theme/Card\";\nimport InputErrorFeedback from \"./InputErrorFeedback\";\n\nexport default function Output({ ...cssprops }) {\n  const { azurResponse, azurInput } = useContext(AzurContext);\n  return (\n    <Card {...cssprops} variant=\"organismWrapper\">\n      <Heading size=\"2xl\">Verteilung</Heading>\n      <Flex flexDirection=\"column\">\n        {!_.isEmpty(azurInput.errors) ? (\n          <InputErrorFeedback inputErrors={azurInput.errors} />\n        ) : azurResponse.error != null ? (\n          <Alert status=\"error\">\n            <AlertIcon />\n            <AlertTitle mr={2}>Fehler bei der Berechnung</AlertTitle>\n            <AlertDescription>\n              Es ist ein Fehler bei der Berechnung aufgetreten:{\" \"}\n              {azurResponse.error.message}\n            </AlertDescription>\n          </Alert>\n        ) : (\n          // everything went fine and we have results\n          <OutputTabs\n            azurResponse={azurResponse.data}\n            azurInput={azurInput.data}\n            loading={azurResponse.loading}\n          />\n        )}\n      </Flex>\n    </Card>\n  );\n}\n","import { useState } from \"react\";\n\nexport const usePrint = () => {\n  const [isPrinting, setIsPrinting] = useState(false);\n\n  window.addEventListener(\"beforeprint\", () => {\n    setIsPrinting(true);\n  });\n\n  window.addEventListener(\"afterprint\", () => {\n    setIsPrinting(false);\n  });\n\n  return { isPrinting };\n};\n","import {\n  Center,\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n  Text,\n  Box,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport PropTypes from \"prop-types\";\n\nimport { parseSeatCountOutput } from \"components/tables/CellRenders\";\n\n// TODO PRINT ONLY MAX 500 ROWS\nconst PrintTable = ({ tableData }) => {\n  let tableOutput = null;\n  // only take first 400 rows for printing\n  if (tableData != null) {\n    tableOutput = tableData.slice(0, 400);\n  }\n\n  return tableOutput != null ? (\n    <Center flexDirection=\"column\" maxWidth=\"100%\">\n      <Table>\n        <Thead>\n          <Tr>\n            <Th>Position</Th>\n            {Object.keys(tableOutput[0].seats).map((partyName) => (\n              <Th key={partyName}>{partyName}</Th>\n            ))}\n          </Tr>\n        </Thead>\n        <Tbody>\n          {tableOutput.map((row, rowIndex) => {\n            return (\n              <Tr key={`tablePrintRow${rowIndex}`}>\n                <Td>{rowIndex + 1}</Td>\n                {Object.values(row.seats).map((entry, colIndex) => {\n                  return (\n                    <Td key={`tablePrintRow${rowIndex}_${colIndex}`}>\n                      {Array.isArray(entry) ? (\n                        <Box layerStyle=\"ambiguityContainerHighlight\">\n                          <Text color=\"brand.orange\">Mehrdeutig!</Text>\n                          <Text>{parseSeatCountOutput(entry)}</Text>\n                        </Box>\n                      ) : (\n                        <Box>{entry}</Box>\n                      )}\n                    </Td>\n                  );\n                })}\n              </Tr>\n            );\n          })}\n        </Tbody>\n      </Table>\n      {tableData.length >= 400 && (\n        <Text>\n          Es kann nur eine begrenzte Anzahl an Zeilen gedruckt werden.\n        </Text>\n      )}\n    </Center>\n  ) : (\n    \"Loading\"\n  );\n};\n\nPrintTable.propTypes = {\n  tableData: PropTypes.array,\n};\n\nexport default PrintTable;\n","import React, { useContext } from \"react\";\nimport { Box, Heading, Text, Table, Tr, Th, Td, Tbody } from \"@chakra-ui/react\";\nimport { AzurContext } from \"context/AzurContext\";\nimport constants from \"utils/constants.json\";\nimport PrintTable from \"../Print/PrintTable\";\n\nconst PrintWrapper = () => {\n  const { azurResponse, azurInput } = useContext(AzurContext);\n\n  const azurInputData = azurInput?.data;\n\n  const tableData = azurResponse?.data?.table;\n\n  let methodUsed = \"\";\n  if (azurInputData?.method != null) {\n    const methodTitle = constants.azurMethods.find(\n      (method) => method?.apiName == azurInputData?.method\n    )?.title;\n    if (methodTitle != null) methodUsed = methodTitle;\n  }\n\n  return (\n    <Box p={3}>\n      <Heading size=\"xl\">Eingabe</Heading>\n      <Box>\n        <Heading size=\"lg\">Verteilmasse</Heading>\n        <Text>{azurInputData?.numSeats}</Text>\n        <Heading size=\"lg\">Methode</Heading>\n        <Text>{methodUsed} </Text>\n        <Heading size=\"lg\">Fraktionsstärken</Heading>\n        {azurInputData.partyStrengths != null && (\n          <Table>\n            <Tbody>\n              <Tr>\n                <Th>Name</Th>\n                {azurInputData?.partyStrengths.map((row) => (\n                  <Td key={`Name_${row.name}`}>{row.name}</Td>\n                ))}\n              </Tr>\n              <Tr>\n                <Th>Stärke</Th>\n                {azurInputData?.partyStrengths.map((row) => (\n                  <Td key={`Stärke_${row.strength}`}>{row.strength}</Td>\n                ))}\n              </Tr>\n            </Tbody>\n          </Table>\n        )}\n      </Box>\n      <Heading size=\"xl\">Ausgabetabelle</Heading>\n      <Box>\n        <PrintTable tableData={tableData} />\n      </Box>\n    </Box>\n  );\n};\n\nexport default PrintWrapper;\n","import { Flex } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport AzurInputs from \"./Input/Input\";\nimport Output from \"./Output/Output\";\nimport { AzurContextWrapper } from \"context/AzurContext\";\nimport { usePrint } from \"utils/usePrint\";\nimport PrintWrapper from \"./Print/PrintWrapper\";\nexport default function AzurDefault() {\n  const { isPrinting } = usePrint();\n\n  return (\n    <AzurContextWrapper>\n      {isPrinting ? (\n        <PrintWrapper />\n      ) : (\n        <Flex\n          flexDirection={[\"column\", \"column\", \"column\", \"row\"]}\n          height={[\"auto\", \"auto\", \"auto\", \"100%\"]}\n          width={[\"auto\", \"auto\", \"auto\", \"90vw\"]}\n          margin={[\"0\", \"0\", \"0\", \"0 auto\"]}\n        >\n          <AzurInputs\n            maxHeight=\"100%\"\n            width={[\"100%\", \"100%\", \"100%\", \"35%\"]} // Todo proper width layout\n          />\n          <Output maxHeight=\"100%\" width={[\"100%\", \"100%\", \"100%\", \"65%\"]} />\n        </Flex>\n      )}\n    </AzurContextWrapper>\n  );\n}\n","import React from \"react\";\nimport AzurDefault from \"views/AzurDefault/AzurDefault\";\nimport AzurCompare from \"views/AzurCompare/AzurCompare\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Box } from \"@chakra-ui/react\";\nimport {\n  Link,\n  Button,\n  useDisclosure,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n} from \"@chakra-ui/react\";\n\nfunction App() {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  React.useEffect(() => {\n    onOpen();\n  }, []);\n\n  return (\n    <Box className=\"App\">\n      <Modal isOpen={isOpen} onClose={onClose}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Diese Seite ist ein Prototyp.</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            Diese Seite ist ein Prototyp des Tech4Germany Fellowship Jahrgangs\n            2021. Die Seite wird nicht mehr aktiv gepflegt, und für die\n            Richtigkeit der Informationen übernehmen wir keine Gewähr.\n          </ModalBody>\n\n          <ModalFooter>\n            <Button mr={3} variant=\"ghost\">\n              <Link href=\"https://tech.4germany.org/project/anteilsberechner-bundestag/\">\n                Mehr Informationen\n              </Link>\n            </Button>\n            <Button colorScheme=\"blue\" onClick={onClose}>\n              Verstanden\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n\n      <Box height=\"100vh\">\n        <AzurDefault />\n      </Box>\n      {/* <BrowserRouter>  */}\n      {/* NAV */}\n      {/*\n      <Flex justifyContent=\"end\" mx=\"10\" height=\"5vh\">\n          <Link to=\"/\">\n            <Button>Azur Default</Button>\n          </Link>\n          <Link to=\"/compare\">\n            <Button>Azur Compare</Button>\n          </Link>\n        </Flex> */}\n\n      {/* APP */}\n      {/*       <Box height=\"100vh\">\n        <Switch>\n            <Route exact={true} path=\"/\">\n        <AzurDefault />\n        </Route>\n            <Route exact={true} path=\"/compare\">\n              <AzurCompare />\n            </Route>\n          </Switch>\n      </Box>\n    </BrowserRouter> */}\n    </Box>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { Global } from \"@emotion/react\";\n\nexport const fonts = {\n  heading: \"BundesSans\",\n  body: \"Open Sans\",\n};\n\nexport const fontSizes = {\n  xs: \"0.6rem\",\n  sm: \"0.8rem\",\n  md: \"1rem\", // 12px normal text\n  lg: \"1.1rem\",\n  xl: \"1.6rem\", // 20px heading 3\n  \"2xl\": \"2rem\", // 24px heading 2\n  \"3xl\": \"2.3rem\", // 28px heading 1\n  \"4xl\": \"3rem\", // custom very large\n  \"5xl\": \"4rem\", // custom very large\n};\n\nconst FontFaces = () => (\n  <Global\n    styles={`\n      @font-face {\n        font-family: 'BundesSans';\n        font-weight: 'normal';\n        font-style: 'italic';\n        src: url('fonts/BundesSansOffice-Italic.ttf');\n      }\n      @font-face {\n        font-family: 'BundesSans';\n        font-weight: 'normal';\n        src: url('fonts/BundesSansOffice.ttf');\n      }\n      @font-face {\n        font-family: 'BundesSans';\n        font-weight: 'bold';\n        font-style: 'italic';\n        src: url('fonts/BundesSansOffice-BoldItalic.ttf');\n      }\n      @font-face {\n        font-family: 'BundesSans';\n        font-weight: 'bold';\n        src: url('fonts/BundesSansOffice-Bold.ttf');\n      }\n    `}\n  />\n);\n\nexport default FontFaces;\n","const Table = {\n  baseStyle: {\n    table: {\n      display: \"inline-block\",\n      maxWidth: \"100%\",\n      width: \"auto\",\n      overflowX: \"auto\",\n      borderCollapse: \"collapse\",\n    },\n    th: {\n      color: \"brand.primary\",\n      textAlign: \"center\",\n      textTransform: \"none\",\n    },\n    td: {\n      textAlign: \"center\",\n      fontWeight: \"normal\",\n    },\n  },\n  sizes: {\n    md: {\n      table: {\n        fontSize: \"md\",\n      },\n      td: {\n        fontSize: \"md\",\n      },\n      th: {\n        fontSize: \"md\",\n      },\n    },\n    lg: {\n      table: {\n        fontSize: \"lg\",\n      },\n      td: {\n        fontSize: \"lg\",\n      },\n      th: {\n        fontSize: \"lg\",\n      },\n    },\n  },\n  variants: {\n    stickyHeader: {\n      table: {\n        height: \"55vh\",\n        overflow: \"auto\",\n      },\n      thead: {\n        position: \"sticky\",\n        top: \"0\",\n        backgroundColor: \"white\",\n      },\n    },\n  },\n  defaultProps: { size: \"md\" },\n};\n\nexport default Table;\n","import { extendTheme } from \"@chakra-ui/react\";\nimport { fontSizes, fonts } from \"./fonts\";\nimport Table from \"./Table\";\n\nconst colors = {\n  brand: {\n    primary: \"#4A5568\",\n    orange: \"#FF7100\",\n    orangeAlpha: {\n      50: \"rgba(255, 133, 0, 0.02)\",\n      100: \"rgba(255, 133, 0, 0.04)\",\n      200: \"rgba(255, 133, 0, 0.08)\",\n      300: \"rgba(255, 133, 0, 0.16)\",\n      400: \"rgba(255, 133, 0, 0.24)\",\n      500: \"rgba(255, 133, 0, 0.36)\",\n      600: \"rgba(255, 133, 0, 0.48)\",\n      700: \"rgba(255, 133, 0, 0.64)\",\n      800: \"rgba(255, 133, 0, 0.80)\",\n    },\n    darkBlue: \"#3396B6\",\n    darkBlueAlpha: {\n      50: \"rgba(51, 150, 182, 0.02)\",\n      100: \"rgba(51, 150, 182, 0.04)\",\n      200: \"rgba(51, 150, 182, 0.08)\",\n      300: \"rgba(51, 150, 182, 0.16)\",\n      400: \"rgba(51, 150, 182, 0.24)\",\n      500: \"rgba(51, 150, 182, 0.36)\",\n      600: \"rgba(51, 150, 182, 0.48)\",\n      700: \"rgba(51, 150, 182, 0.64)\",\n      800: \"rgba(51, 150, 182, 0.80)\",\n    },\n    backgroundGrey: \"#EDF2F7\", // \"#F6F6FA\",\n  },\n};\n\nconst Button = {\n  baseStyle: {\n    margin: \"1\",\n    padding: \"1.5em\",\n    whiteSpace: \"normal\", // necessary to allow for line breaks\n    wordWrap: \"break-word\",\n    borderRadius: \"none\",\n    fontWeight: \"normal\",\n  },\n  variants: {\n    active: {\n      backgroundColor: \"brand.orangeAlpha.600\",\n      border: \"1px solid\",\n      borderColor: \"brand.orange\",\n      fontWeight: \"bold\",\n    },\n  },\n};\n\nconst Card = {\n  baseStyle: {\n    backgroundColor: \"brand.backgroundGrey\",\n    borderRadius: \"lg\",\n    m: 3,\n    p: \"10\",\n    py: \"2\",\n    overflowY: \"auto\",\n  },\n  variants: {\n    ghost: {\n      backgroundColor: \"transparent\",\n    },\n  },\n};\n\nconst Tabs = {\n  parts: [\"tabpanel\", \"tab\"],\n  baseStyle: {\n    tabpanel: {\n      bg: \"white\",\n      my: 0,\n      border: \"1px solid\",\n      borderColor: \"brand.darkBlue\",\n    },\n    tab: {\n      bg: \"white\",\n      p: 3,\n    },\n  },\n  variants: {},\n};\n\nconst Input = {\n  parts: [\"field\"],\n  baseStyle: {\n    field: {\n      margin: \"1\",\n      my: 0,\n      py: \"1\",\n      px: \"4\",\n      backgroundColor: \"white\",\n      outline: \"1px solid\",\n      outlineColor: \"brand.darkBlueAlpha.200\",\n      border: \"none\",\n    },\n  },\n  variants: {\n    fakeInput: {\n      field: {\n        pointerEvents: \"none\",\n      },\n    },\n  },\n  defaultProps: {\n    size: \"\",\n    variant: \"\",\n  },\n};\n\nconst Heading = {\n  baseStyle: {\n    color: \"brand.primary\",\n    fontWeight: \"regular\",\n  },\n  sizes: {\n    lg: {\n      fontSize: \"lg\",\n      mt: \"5\",\n      mb: \"3\",\n    },\n    xl: {\n      fontSize: \"xl\",\n      mt: \"7\",\n      mb: \"3\",\n      color: \"brand.darkBlue\",\n    },\n    \"2xl\": {\n      fontSize: \"2xl\",\n      mt: \"7\",\n      mb: \"3\",\n      color: \"brand.darkBlue\",\n    },\n  },\n};\n\nexport const bundestagTheme = extendTheme({\n  components: {\n    Button,\n    Input,\n    Heading,\n    Tabs,\n    Card,\n    Table,\n  },\n  colors,\n  fonts,\n  fontSizes,\n  layerStyles: {\n    errorGlow: {\n      outline: \"1px solid #E53E3E\",\n      boxShadow: \"0 0 10px #E53E3E\",\n    },\n    ambiguityContainerHighlight: {\n      /*       outline: \"1px solid #FF7100\",\n      boxShadow: \"0 0 10px #FF7100\", */\n    },\n    changedRowHighlight: {\n      /*       outline: \"1px solid #FF7100\",\n      boxShadow: \"0 0 10px #FF7100\", */\n      backgroundColor: \"brand.orangeAlpha.300\",\n    },\n    ambigousRowHighlight: {\n      backgroundColor: \"brand.orangeAlpha.300\",\n    },\n  },\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"App\";\nimport \"@fontsource/open-sans/400.css\";\nimport \"@fontsource/open-sans/700.css\";\nimport FontFaces from \"./theme/fonts\";\nimport { bundestagTheme } from \"./theme/themes.js\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider resetCSS={true} theme={bundestagTheme}>\n      <FontFaces />\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}